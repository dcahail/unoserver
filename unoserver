#!/bin/bash
### BEGIN INIT INFO
# Provides:          unoserver
# Required-Start:    $syslog $network $remote_fs $local_fs $time
# Required-Stop:     $syslog $network $remote_fs $local_fs $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: unoserver server
# Author: Darrell Cahail <darrell.cahail@csus.edu>
# Description:       Start the unoserver server
#  This script will start the unoserver server. It must be placed into /etc/init.d if not using systemd.
### END INIT INFO

DESC="unoserver server"
NAME=unoserver

LIBREOFFICE=/usr/lib/libreoffice/program

INTERFACE=localhost
PORT=2002

PYTHON=/usr/bin/python3
SOFFICE=${LIBREOFFICE}/soffice
SOFFICEBIN=${LIBREOFFICE}/soffice.bin

EXEC="${PYTHON} -m unoserver.server --daemon --interface ${INTERFACE} --port ${PORT} --executable ${SOFFICE}"

PIDFILE=/var/run/unoserver.pid

case "$1" in
    start)
        if [ -f ${PIDFILE} ]
        then
            echo "${PIDFILE} exists, process is already running or crashed"
        else
            echo "Starting Unoserver server ..."
            echo "${EXEC}"
            ${EXEC}
            while [ -z ${PID} ]
            do
                echo "Waiting for Unoserver to start ..."
                sleep 1
                PID=$(pidof ${SOFFICEBIN})
            done
            echo ${PID} > ${PIDFILE}
            echo "Unoserver started"
        fi
        ;;
    stop)
        if [ ! -f ${PIDFILE} ]
        then
            echo "${PIDFILE} does not exist, process is not running"
        else
            PID=$(cat ${PIDFILE})
            echo "Stopping ..."
            if [ ! -z ${PID} ]
            then
                kill ${PID}
                while [ -x /proc/${PID} ]
                do
                    echo "Waiting for Unoserver to shutdown ..."
                    sleep 1
                done
            else
                pkill -9 soffice.bin
            fi
            rm -rf ${PIDFILE}
            echo "Unoserver stopped"
        fi
        ;;
    status)
        PID=$(cat ${PIDFILE})
        if [ ! -x /proc/${PID} ]
        then
            echo 'Unoserver is not running'
        else
            echo "Unoserver is running (${PID})"
        fi
        ;;
    restart)
        $0 stop
        $0 start
        ;;
    *)
        echo "Please use start, stop, restart or status as first argument"
        ;;
esac
